---
- name: Basic Setup
  hosts: test
  become: yes
  tags:
    - base
  vars_files:
    - vars.yml
  roles:
    - base

- name: BigBlueButton
  hosts: test
  become: yes
  tags:
    - install-bbb
  vars_files:
    - vars.yml
  vars:
    bbb_letsencrypt_enable: yes
    bbb_letsencrypt_email: "{{ letsencrypt_email }}"
    bbb_coturn_enable: yes
    bbb_turn_enable: yes
    bbb_coturn_port_tls: 5349
    bbb_turn_servers:
      - server: "{{ bbb_hostname }}"
        port: "{{ bbb_coturn_port }}"
        secret: "{{ bbb_coturn_secret }}"
        tls: false
      - server: "{{ bbb_hostname }}"
        port: "{{ bbb_coturn_port_tls }}"
        secret: "{{ bbb_coturn_secret }}"
        tls: true
    bbb_nginx_dh: no
    bbb_greenlight_enable: no
    bbb_api_demos_enable: no
  pre_tasks:
    - name: find out what the current turn config is
      slurp:
        src: /etc/turnserver.conf
      register: current_turn_conf
      ignore_errors: yes
      when: not bbb_coturn_secret is defined
    - name: register current turn secret
      set_fact:
        bbb_coturn_secret: "{{ current_turn_conf.content | b64decode | regex_findall('static-auth-secret=(.+)') | first }}"
      when: not bbb_coturn_secret is defined and not current_turn_conf.failed
    - name: Generate turn server secret
      command: openssl rand -hex 16
      register: openssl_rand_16_turn
      check_mode: no
      when: not bbb_coturn_secret is defined
    - name: Register turn server secret
      set_fact:
        bbb_coturn_secret: "{{ openssl_rand_16_turn.stdout }}"
      when: not bbb_coturn_secret is defined and openssl_rand_16_turn is defined
  roles:
    - nginx
    - n0emis.bigbluebutton
    - kwoodson.yedit
    - bbb-srcf

- name: Collect BBB secrets
  hosts: bbb
  become: yes
  tags:
    - install-bbb
    - greenlight
  roles:
    - bbb-collect

- name: Frontend - Greenlight
  hosts: bbb
  become: yes
  vars_files:
    - vars.yml
  tags:
    - greenlight
  vars:
    nginx_domain_name: "bbb-test-gl.srcf.net"
    lb_url: "{{ bbb_url }}"
    lb_secret: "{{ bbb_secret }}"
    redis_port: 6379
    redis_bind_interface: 127.0.0.1
    ruby_install_from_source: yes
    ruby_version: 2.6.6
    ruby_download_url: https://cache.ruby-lang.org/pub/ruby/2.6/ruby-2.6.6.tar.gz
    ruby_install_bundler: yes
    nodejs_version: "12.x"
    postgresql_hba_entries:
      - { type: local, database: all, user: postgres, auth_method: peer }
      - { type: local, database: all, user: all, auth_method: peer }
      - {
          type: host,
          database: all,
          user: all,
          address: "127.0.0.1/32",
          auth_method: trust,
        }
      - {
          type: host,
          database: all,
          user: all,
          address: "::1/128",
          auth_method: trust,
        }
    postgresql_users:
      - name: greenlight
        state: present
    postgresql_databases:
      - name: greenlight_production
        owner: greenlight
        state: present
    postgres_users_no_log: false
  roles:
    - nginx
    - nginx-tls
    - role: geerlingguy.postgresql
      become: yes
    - geerlingguy.redis
    - geerlingguy.ruby
    - geerlingguy.nodejs
    - greenlight
