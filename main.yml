---
- name: Basic Setup
  hosts: all
  become: yes
  tags:
    - base
  vars_files:
    - vars.yml
  roles:
    - base

- name: TURN Server
  hosts: turn
  become: yes
  tags:
    - turn
  vars_files:
    - vars.yml    
  roles:
    - turn-standalone

- name: Monitored host
  hosts: all
  become: yes
  tags:
    - base-monitoring
  vars:
    _node_exporter_binary_install_dir: "/opt/node_exporter"
    _node_exporter_system_group: "prometheus"
    _node_exporter_system_user: "prometheus"
  roles:
    - cloudalchemy.node-exporter
    - node-exporter-ufw

- name: BigBlueButton
  hosts: bbb
  become: yes
  tags:
    - install-bbb
  vars_files:
    - vars.yml
  vars:
    bbb_letsencrypt_enable: yes
    bbb_letsencrypt_email: "{{ letsencrypt_email }}"
    bbb_coturn_enable: yes
    bbb_turn_enable: yes
    bbb_coturn_port_tls: 5349
    bbb_turn_servers:
      - server: "{{ bbb_hostname }}"
        port: "{{ bbb_coturn_port }}"
        secret: "{{ bbb_coturn_secret }}"
        tls: false
      - server: "{{ bbb_hostname }}"
        port: "{{ bbb_coturn_port_tls }}"
        secret: "{{ bbb_coturn_secret }}"
        tls: true
      - server: "{{ bbb_additional_turn_server }}"
        port: 443
        secret: "{{ turn_secret }}"
        tls: true
    bbb_nginx_dh: no
    bbb_greenlight_enable: no
    bbb_api_demos_enable: no
    nfs_bbb: yes
    nfs_active_meetings: yes
  pre_tasks:
    - name: find out what the current turn config is
      slurp:
        src: /etc/turnserver.conf
      register: current_turn_conf
      ignore_errors: yes
      when: not bbb_coturn_secret is defined
    - name: register current turn secret
      set_fact:
        bbb_coturn_secret: "{{ current_turn_conf.content | b64decode | regex_findall('static-auth-secret=(.+)') | first }}"
      when: not bbb_coturn_secret is defined and not current_turn_conf.failed
    - name: Generate turn server secret
      command: openssl rand -hex 16
      register: openssl_rand_16_turn
      check_mode: no
      when: not bbb_coturn_secret is defined
    - name: Register turn server secret
      set_fact:
        bbb_coturn_secret: "{{ openssl_rand_16_turn.stdout }}"
      when: not bbb_coturn_secret is defined and openssl_rand_16_turn is defined
  roles:
    - { role: bbb-nfs-srcf, when: recording_server|bool}
    - nginx
    - n0emis.bigbluebutton
    - kwoodson.yedit
    - bbb-srcf

- name: Collect BBB secrets
  hosts: bbb
  become: yes
  tags:
    - install-bbb
    - scalelite-config
  roles:
    - bbb-collect

- name: BBB Exporter
  hosts: bbb
  become: yes
  tags:
    - bbb-monitoring
  roles:
    - bbb-exporter

- name: Loadbalancer
  hosts: loadbalancer
  become: yes
  tags:
    - loadbalancer
  vars_files:
    - vars.yml
  vars:
    nginx_domain_name: "gateway.timeout.srcf.net"
    redis_port: 6379
    redis_bind_interface: 127.0.0.1
    ruby_install_from_source: yes
    ruby_version: 2.6.6
    ruby_download_url: https://cache.ruby-lang.org/pub/ruby/2.6/ruby-2.6.6.tar.gz
    ruby_install_bundler: yes
    postgresql_hba_entries:
      - { type: local, database: all, user: postgres, auth_method: peer }
      - { type: local, database: all, user: all, auth_method: peer }
      - {
          type: host,
          database: all,
          user: all,
          address: "127.0.0.1/32",
          auth_method: trust,
        }
      - {
          type: host,
          database: all,
          user: all,
          address: "::1/128",
          auth_method: trust,
        }
    postgresql_users:
      - name: scalelite
        state: present
      - name: grafana
        state: present
    postgresql_databases:
      - name: scalelite
        owner: scalelite
        state: present
      - name: grafana
        owner: grafana
        state: present
    nfs_scalelite_read: yes
  roles:
    - bbb-nfs-srcf
    - nginx
    - nginx-tls
    - geerlingguy.redis
    - role: geerlingguy.postgresql
      become: yes
    - geerlingguy.ruby
    - scalelite

- name: Register BBBs at Loadbalancer
  hosts: loadbalancer
  become: yes
  tags:
    - register-bbbs
  roles:
    - scalelite-config

- name: Recording offloader
  hosts: offloader
  become: yes
  tags:
    - offloader
  vars:
    nfs_bbb: yes
    nfs_scalelite_write: yes
    bbb_recording_deps:
      - bbb-record-core
      - bbb-mkclean
      - bbb-playback-notes
      - bbb-playback-podcast
      - bbb-playback-presentation
      - bbb-playback-screenshare 
      - bbb-config
  roles:
    - base
    - bbb-nfs-srcf
    - kwoodson.yedit
    - record-offloader

# - name: Easy Join
#   hosts: loadbalancer
#   become: yes
#   vars_files:
#     - vars.yml
#   vars:
#     nodejs_version: "12.x"
#     bbb_secret: "{{ scalelite_loadbalancer_secret }}"
#   tags:
#     - loadbalancer
#   roles:
#     - nginx
#     - nginx-tls
#     - geerlingguy.nodejs
#     - bbb-easy-join

- name: Frontend - Greenlight
  hosts: frontend
  become: yes
  vars_files:
    - vars.yml
  tags:
    - greenlight
  vars:
    nginx_domain_name: "timeout.srcf.net"
#    nginx_redirect_alias: "gl.gateway.timeout.srcf.net"
    lb_url: "{{ scalelite_loadbalancer_url }}"
    lb_secret: "{{ scalelite_loadbalancer_secret }}"
    redis_port: 6379
    redis_bind_interface: 127.0.0.1
    ruby_install_from_source: yes
    ruby_version: 2.6.6
    ruby_download_url: https://cache.ruby-lang.org/pub/ruby/2.6/ruby-2.6.6.tar.gz
    ruby_install_bundler: yes
    nodejs_version: "12.x"
    postgresql_hba_entries:
      - { type: local, database: all, user: postgres, auth_method: peer }
      - { type: local, database: all, user: all, auth_method: peer }
      - {
          type: host,
          database: all,
          user: all,
          address: "127.0.0.1/32",
          auth_method: trust,
        }
      - {
          type: host,
          database: all,
          user: all,
          address: "::1/128",
          auth_method: trust,
        }
    postgresql_users:
      - name: greenlight
        state: present
    postgresql_databases:
      - name: greenlight_production
        owner: greenlight
        state: present
  roles:
    - nginx
    - nginx-tls
    - geerlingguy.redis
    - role: geerlingguy.postgresql
      become: yes
    - geerlingguy.ruby
    - geerlingguy.nodejs
    - greenlight

  

- name: Monitoring
  hosts: loadbalancer
  become: yes
  tags:
    - scalelite-config
    - monitoring
  vars_files:
    - vars.yml
  vars:
    nginx_domain_name: mon.timeout.srcf.net
    prometheus_targets:
      node:
        - targets: "{{ groups['all'] | map('extract', hostvars, ['inventory_hostname']) | map('regex_replace', '$', ':9100') | list }}"
      bbb:
        - targets: "{{ groups['bbb'] | map('extract', hostvars, ['inventory_hostname']) | map('regex_replace', '$', ':9688') | list }}"
    prometheus_scrape_configs:
      - job_name: "prometheus"
        metrics_path: "/metrics"
        static_configs:
          - targets:
              - "127.0.0.1:9090"
      - job_name: "node"
        file_sd_configs:
          - files:
              - "/etc/prometheus/file_sd/node.yml"
        relabel_configs:
          - source_labels: ["__address__"]
            separator: ":"
            regex: "(.*):.*"
            target_label: "instance"
            replacement: "$1"
      - job_name: "bbb"
        file_sd_configs:
          - files:
              - "/etc/prometheus/file_sd/bbb.yml"
        relabel_configs:
          - source_labels: ["__address__"]
            separator: ":"
            regex: "(.*):.*"
            target_label: "instance"
            replacement: "$1"
    grafana_address: 127.0.0.1
    grafana_port: 3001
    grafana_url: "https://mon.timeout.srcf.net"
    grafana_domain: "mon.timeout.srcf.net"
    grafana_database:
      type: postgres
      host: 127.0.0.1:5432
      name: grafana
      user: grafana
      password: trust
    grafana_datasources:
      - name: prometheus
        type: prometheus
        access: proxy
        url: "http://localhost:9090"
        basicAuth: false
        isDefault: true
    grafana_dashboards_dir: files/grafana/dashboards
    grafana_security:
      admin_user: admin
      admin_password: "{{ monitoring_grafana_admin_password }}"
    grafana_users:
      allow_sign_up: false
      default_theme: dark
      auto_assign_org: true
      editors_can_admin: true
      auto_assign_org_role: Editor
    grafana_auth:
      disable_login_form: false
      anonymous:
        enabled: true
        org_name: srcf
        org_role: Viewer
  roles:
    - cloudalchemy.prometheus
    - prometheus-ufw
    - cloudalchemy.grafana
    - nginx-tls-monitoring
