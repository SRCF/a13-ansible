---
- import_tasks: nginx-config.yml

- name: Ensure group "scalelite" exists
  group:
    name: scalelite
    state: present

- name: Ensure user scalelite exists
  user:
    name: scalelite
    shell: /bin/bash
    password: '!'
    update_password: on_create
    groups: scalelite
    state: present

- name: Ensure that BBB apt key is present
  apt_key:
    url: "https://ubuntu.bigbluebutton.org/repo/bigbluebutton.asc"
    state: present

- name: Add BBB apt repository
  apt_repository:
    repo: "deb http://ubuntu.bigbluebutton.org/xenial-220/ bigbluebutton-xenial main"
    filename: bigbluebutton
    state: present

- name: Ensure that yq apt key is present
  apt_key:
    url: "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x9a2d61f6bb03ced7522b8e7d6657dbe0cc86bb64"
    state: present

- name: Add yq apt repository
  apt_repository:
    repo: "deb http://ppa.launchpad.net/rmescandon/yq/ubuntu {{ ansible_distribution_release }} main"
    filename: yq
    state: present

- name: Make /var/freeswitch/meetings because BBB packages assume it exists, sigh
  file:
    path: /var/freeswitch/meetings
    state: directory

- name: Download BBB playback components
  apt:
    pkg:
      - bbb-playback-notes
      - bbb-playback-podcast
      - bbb-playback-presentation
      - bbb-playback-screenshare
  when: recording

- name: Checkout scalelite repository
  git:
    repo: https://github.com/blindsidenetworks/scalelite.git
    dest: /var/www/scalelite
    version: master
  notify: restart scalelite

- name: Ensure scalelite is owner of /var/www/scalelite
  file:
    path: /var/www/scalelite
    recurse: yes
    owner: scalelite
    group: scalelite

- name: Ensure Bundler 2 is installed
  gem:
    name: bundler
    state: latest
    user_install: no

- name: Ensure sqlite is installed
  apt:
    name:
      - sqlite3
      - libsqlite3-dev
    state: present

# bundler: deployment mode by cli argument is deprecated, so we're going to run this:
- name: Ensure bundle in is deployment mode
  command:
    cmd: bundle config set deployment 'true'
    chdir: /var/www/scalelite
    creates: /var/www/scalelite/.bundle/config
  become: yes
  become_user: scalelite

- name: Ensure gems for scalelite are installed
  bundler:
    state: present
    exclude_groups:
      - development
      - test
    chdir: /var/www/scalelite
  become: yes
  become_user: scalelite

- name: Generate scalelite secret key base
  command: openssl rand -hex 64
  register: openssl_rand64
  check_mode: no
  when: not scalelite_secret_key_base is defined

- name: Register secret key base
  set_fact:
    scalelite_secret_key_base: "{{ openssl_rand64.stdout }}"
  when: not scalelite_secret_key_base is defined

- name: Generate scalelite loadbalancer secret
  command: openssl rand -hex 32
  register: openssl_rand32
  check_mode: no
  when: not scalelite_loadbalancer_secret is defined

- name: Register loadbalancer secret
  set_fact:
    scalelite_loadbalancer_secret: "{{ openssl_rand32.stdout }}"
  when: not scalelite_loadbalancer_secret is defined

- name: Ensure environment file for scalelite
  template:
    src: env.j2
    dest: /var/www/scalelite/.env
  become: yes
  notify: restart scalelite
  become_user: scalelite

- name: Ensure systemd unit for scalelite api
  template:
    src: scalelite-api.service
    dest: /etc/systemd/system/scalelite-api.service

- name: Ensure systemd unit for scalelite poller
  template:
    src: scalelite-poller.service
    dest: /etc/systemd/system/scalelite-poller.service

- name: Ensure systemd unit for scalelite recorder
  template:
    src: scalelite-recording-importer.service
    dest: /etc/systemd/system/scalelite-recording-importer.service
  when: recording

- name: Ensure systemd target for scalelite
  template:
    src: scalelite.target
    dest: /etc/systemd/system/scalelite.target

- name: Enable scalelite units
  systemd:
    daemon_reload: yes
    name: "{{ item }}"
    enabled: yes
  with_items:
    - scalelite-api
    - scalelite-poller
#    - "{ src: scalelite-recording-importer, when: "{{recording}}" }"

- name: restart postgres
  service:
    name: postgresql
    state: restarted

- name: Count scalelite database tables
  shell:
    cmd: "psql -h 127.0.0.1 -U scalelite scalelite -qAt -c 'select count(*) from pg_stat_user_tables;'"
  check_mode: no
  register: scalelite_database_tablecount

- name: Ensure database schema is loaded
  shell:
    chdir: /var/www/scalelite
    executable: /bin/bash
    cmd: "set -o allexport; source .env; set +o allexport; bundle exec rails db:schema:load"
  become: yes
  become_user: scalelite
  when: scalelite_database_tablecount.stdout|int <= 1

# - name: Ensure existence and permissions of directories
#   file:
#     path: /mnt/scalelite-recordings/var/bigbluebutton/{{ item }}
#     state: directory
#     mode: '0775'
#   with_items:
#     - "spool"
#     - "recording/scalelite"
#     - "published"
#     - "unpublished"

# - name: Ensure scalelite is owner of /var/bigbluebutton/spool
#   file:
#     path: /mnt/scalelite-recordings/var/bigbluebutton/spool
#     owner: 1000
#     group: 2000

# - name: Ensure scalelite is owner of /var/bigbluebutton/*
#   file:
#     path: /mnt/scalelite-recordings/var/bigbluebutton/{{ item }}
#  #   recurse: yes
#     owner: 1000
#     group: 1000
#   with_items:
#     - "recording/scalelite"
#     - "published"
#     - "unpublished"

- name: Ensure scalelite-api is started
  systemd:
    name: scalelite-api
    state: started

- name: Ensure scalelite-poller is started
  systemd:
    name: scalelite-poller
    state: started

- name: Ensure scalelite-recording-importer is started
  systemd:
    name: scalelite-recording-importer
    state: started
  when: recording
